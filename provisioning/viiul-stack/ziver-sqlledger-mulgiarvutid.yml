version: '3.3'
services:
  mulgiarvutid:
    hostname: mulgiarvutid-ledger
    image: drnoa/sqlledger-docker:latest
    volumes:
      - mulgiarvutid-ledger-data:/var/lib/postgresql
      - mulgiarvutid-ledger-files:/var/www/html
    networks:
      - traefik-public
    deploy:
      replicas: 1
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=traefik-public
        # Use the custom label "traefik.constraint-label=traefik-public"
        # This public Traefik will only use services with this label
        # That way you can add other internal Traefik instances per stack if needed
        - traefik.constraint-label=traefik-public
        # https-redirect middleware to redirect HTTP to HTTPS
        # It can be re-used by other stacks in other Docker Compose files
        - traefik.http.middlewares.mulgiarvutid-ledger-https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.mulgiarvutid-ledger-https-redirect.redirectscheme.permanent=true
        # traefik-http set up only to use the middleware to redirect to https
        # Uses the environment variable DOMAIN
        - traefik.http.routers.mulgiarvutid-ledger-public-http.rule=Host(`mulgiarvutid.viiul.com`)
        - traefik.http.routers.mulgiarvutid-ledger-public-http.entrypoints=http
        - traefik.http.routers.mulgiarvutid-ledger-public-http.middlewares=mulgiarvutid-ledger-https-redirect
        # traefik-https the actual router using HTTPS
        # Uses the environment variable DOMAIN
        - traefik.http.routers.mulgiarvutid-ledger-public-https.rule=Host(`mulgiarvutid.viiul.com`)
        - traefik.http.routers.mulgiarvutid-ledger-public-https.entrypoints=https
        - traefik.http.routers.mulgiarvutid-ledger-public-https.tls=true
        # Use the special mulgiarvutid-ledger service
        - traefik.http.routers.mulgiarvutid-ledger-public-https.service=mulgiarvutid-ledger
        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.mulgiarvutid-ledger-public-https.tls.certresolver=le
        # Enable HTTP Basic auth, using the middleware created above
        # Define the port inside of the Docker service to use
        - traefik.http.services.mulgiarvutid-ledger.loadbalancer.server.port=80

volumes:
  mulgiarvutid-ledger-data:
  mulgiarvutid-ledger-files:

networks:
  traefik-public:
    external: true
