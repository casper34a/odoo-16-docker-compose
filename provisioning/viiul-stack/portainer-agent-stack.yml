version: '3.2'

services:
  agent:
    image: portainer/agent
    environment:
      # REQUIRED: Should be equal to the service name prefixed by "tasks." when
      # deployed inside an overlay network
      AGENT_CLUSTER_ADDR: tasks.agent
      # AGENT_PORT: 9001
      # LOG_LEVEL: debug
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - agent-network
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]

  portainer:
    image: portainer/portainer-ce:2.0.0
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    volumes:
      - portainer-data:/data
    networks:
      - agent-network
      - traefik-public
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=traefik-public
        # Use the custom label "traefik.constraint-label=traefik-public"
        # This public Traefik will only use services with this label
        # That way you can add other internal Traefik instances per stack if needed
        - traefik.constraint-label=traefik-public
        # https-redirect middleware to redirect HTTP to HTTPS
        # It can be re-used by other stacks in other Docker Compose files
        - traefik.http.middlewares.portainer-https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.portainer-https-redirect.redirectscheme.permanent=true
        # traefik-http set up only to use the middleware to redirect to https
        # Uses the environment variable DOMAIN
        - traefik.http.routers.portainer-public-http.rule=Host(`conductorportainer.viiul.com`)
        - traefik.http.routers.portainer-public-http.entrypoints=http
        - traefik.http.routers.portainer-public-http.middlewares=portainer-https-redirect
        # traefik-https the actual router using HTTPS
        # Uses the environment variable DOMAIN
        - traefik.http.routers.portainer-public-https.rule=Host(`conductorportainer.viiul.com`)
        - traefik.http.routers.portainer-public-https.entrypoints=https
        - traefik.http.routers.portainer-public-https.tls=true
        # Use the special Portainer service portainer with the web UI/Dashboard
        - traefik.http.routers.portainer-public-https.service=portainer
        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.portainer-public-https.tls.certresolver=le
        # Enable HTTP Basic auth, using the middleware created above
        # Define the port inside of the Docker service to use
        - "traefik.http.services.portainer.loadbalancer.server.port=9000"

networks:
  agent-network:
    external: true
  traefik-public:
    external: true

volumes:
  portainer-data:
