version: '3.3'
services:
  dbms_pg9:
    hostname: pg9
    image: postgres:9
    environment:
      - POSTGRES_PASSWORD=odoo
      - POSTGRES_USER=odoo
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - pg9-db-data:/var/lib/postgresql/data
    networks:
      - postgres-network
      - odoo-network
    deploy:
      mode: replicated
      replicas: 1

  dbms_pg12:
    hostname: pg12
    image: postgres:12
    environment:
      - POSTGRES_PASSWORD=odoo
      - POSTGRES_USER=odoo
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - pg12-db-data:/var/lib/postgresql/data
    networks:
      - postgres-network
      - odoo-network
    deploy:
      mode: replicated
      replicas: 1

  pgadmin:
    hostname: pgadmin
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=janno@gurud.ee
      - PGADMIN_DEFAULT_PASSWORD=pG@dM1nA4c0MDuCtOr*
    volumes:
      - pgadmin-data:/pgadmin/
    networks:
      - postgres-network
      - traefik-public
    deploy:
      mode: replicated
      replicas: 1
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=traefik-public
        # Use the custom label "traefik.constraint-label=traefik-public"
        # This public Traefik will only use services with this label
        # That way you can add other internal Traefik instances per stack if needed
        - traefik.constraint-label=traefik-public
        # https-redirect middleware to redirect HTTP to HTTPS
        # It can be re-used by other stacks in other Docker Compose files
        - traefik.http.middlewares.pgadmin-https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.pgadmin-https-redirect.redirectscheme.permanent=true
        # traefik-http set up only to use the middleware to redirect to https
        # Uses the environment variable DOMAIN
        - traefik.http.routers.pgadmin-public-http.rule=Host(`conductorpgadmin.viiul.com`)
        - traefik.http.routers.pgadmin-public-http.entrypoints=http
        - traefik.http.routers.pgadmin-public-http.middlewares=pgadmin-https-redirect
        # traefik-https the actual router using HTTPS
        # Uses the environment variable DOMAIN
        - traefik.http.routers.pgadmin-public-https.rule=Host(`conductorpgadmin.viiul.com`)
        - traefik.http.routers.pgadmin-public-https.entrypoints=https
        - traefik.http.routers.pgadmin-public-https.tls=true
        # Use the special pgadmin service pgadmin with the web UI/Dashboard
        - traefik.http.routers.pgadmin-public-https.service=pgadmin
        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.pgadmin-public-https.tls.certresolver=le
        # Enable HTTP Basic auth, using the middleware created above
        # Define the port inside of the Docker service to use
        - traefik.http.services.pgadmin.loadbalancer.server.port=80

volumes:
  pg9-db-data:
  pgadmin-data:
  pg12-db-data:

networks:
  odoo-network:
    external: true
  postgres-network:
    external: true
  traefik-public:
    external: true
