version: '3.3'
services:
  oo10_saas_live_1:
    hostname: oo10SaaSlive1
    image: odoo:10
    environment:
      - HOST=dbs_dbms_pg9
      - PORT=5432
      - USER=odoo
      - PASSWORD=odoo
    volumes:
      - oo10-saas-live-1-web-data:/var/lib/odoo
      - oo10-saas-live-1-config:/etc/odoo
      - oo10-saas-live-1-addons:/mnt/extra-addons
      - oo10-saas-live-1-usrlocallib:/usr/local/lib
    networks:
      - odoo-network
      - traefik-public
    deploy:
      replicas: 1
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=traefik-public
        # Use the custom label "traefik.constraint-label=traefik-public"
        # This public Traefik will only use services with this label
        # That way you can add other internal Traefik instances per stack if needed
        - traefik.constraint-label=traefik-public
        # https-redirect middleware to redirect HTTP to HTTPS
        # It can be re-used by other stacks in other Docker Compose files
        - traefik.http.middlewares.oo10SaaSlive1-https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.oo10SaaSlive1-https-redirect.redirectscheme.permanent=true
        # traefik-http set up only to use the middleware to redirect to https
        # Uses the environment variable DOMAIN
        - traefik.http.routers.oo10SaaSlive1-public-http.rule=Host(`odoo10live.viiul.com`, `odoox.viiul.com`, `odoo10saaslive.viiul.com`, `rzlaht.viiul.fi`)
        - traefik.http.routers.oo10SaaSlive1-public-http.entrypoints=http
        - traefik.http.routers.oo10SaaSlive1-public-http.middlewares=oo10SaaSlive1-https-redirect
        # traefik-https the actual router using HTTPS
        # Uses the environment variable DOMAIN
        - traefik.http.routers.oo10SaaSlive1-public-https.rule=Host(`odoo10live.viiul.com`, `odoox.viiul.com`, `odoo10saaslive.viiul.com`, `rzlaht.viiul.fi`)
        - traefik.http.routers.oo10SaaSlive1-public-https.entrypoints=https
        - traefik.http.routers.oo10SaaSlive1-public-https.tls=true
        # Use the special oo10SaaSlive1 service
        - traefik.http.routers.oo10SaaSlive1-public-https.service=oo10SaaSlive1
        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.oo10SaaSlive1-public-https.tls.certresolver=le
        # Enable HTTP Basic auth, using the middleware created above
        # Define the port inside of the Docker service to use
        - traefik.http.services.oo10SaaSlive1.loadbalancer.server.port=8069

  oo10_saas_dev_1:
    hostname: oo10SaaSdev1
    image: odoo:10
    environment:
      - HOST=dbs_dbms_pg9
      - PORT=5432
      - USER=odoo
      - PASSWORD=odoo
    volumes:
      - oo10-saas-dev-1-web-data:/var/lib/odoo
      - oo10-saas-dev-1-config:/etc/odoo
      - oo10-saas-dev-1-addons:/mnt/extra-addons
      - oo10-saas-dev-1-usrlocallib:/usr/local/lib
    networks:
      - odoo-network
      - traefik-public
    deploy:
      replicas: 1
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=traefik-public
        # Use the custom label "traefik.constraint-label=traefik-public"
        # This public Traefik will only use services with this label
        # That way you can add other internal Traefik instances per stack if needed
        - traefik.constraint-label=traefik-public
        # https-redirect middleware to redirect HTTP to HTTPS
        # It can be re-used by other stacks in other Docker Compose files
        - traefik.http.middlewares.oo10SaaSdev1-https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.oo10SaaSdev1-https-redirect.redirectscheme.permanent=true
        # traefik-http set up only to use the middleware to redirect to https
        # Uses the environment variable DOMAIN
        - traefik.http.routers.oo10SaaSdev1-public-http.rule=Host(`odoo10dev.viiul.com`, `odoox.viiul.com`)
        - traefik.http.routers.oo10SaaSdev1-public-http.entrypoints=http
        - traefik.http.routers.oo10SaaSdev1-public-http.middlewares=oo10SaaSdev1-https-redirect
        # traefik-https the actual router using HTTPS
        # Uses the environment variable DOMAIN
        - traefik.http.routers.oo10SaaSdev1-public-https.rule=Host(`odoo10dev.viiul.com`, `odoox.viiul.com`)
        - traefik.http.routers.oo10SaaSdev1-public-https.entrypoints=https
        - traefik.http.routers.oo10SaaSdev1-public-https.tls=true
        # Use the special oo10SaaSdev1 service
        - traefik.http.routers.oo10SaaSdev1-public-https.service=oo10SaaSdev1
        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.oo10SaaSdev1-public-https.tls.certresolver=le
        # Enable HTTP Basic auth, using the middleware created above
        # Define the port inside of the Docker service to use
        - traefik.http.services.oo10SaaSdev1.loadbalancer.server.port=8069

  oo14_saas_dev_1:
    hostname: oo14SaaSdev1
    image: odoo:14
    environment:
      - HOST=dbms_pg12
      - PORT=5432
      - USER=odoo
      - PASSWORD=odoo
    volumes:
      - oo14-saas-dev-1-web-data:/var/lib/odoo
      - oo14-saas-dev-1-config:/etc/odoo
      - oo14-saas-dev-1-addons:/mnt/extra-addons
      - oo14-saas-dev-1-usrlocallib:/usr/local/lib
    networks:
      - odoo-network
      - traefik-public
    deploy:
      replicas: 1
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=traefik-public
        # Use the custom label "traefik.constraint-label=traefik-public"
        # This public Traefik will only use services with this label
        # That way you can add other internal Traefik instances per stack if needed
        - traefik.constraint-label=traefik-public
        # https-redirect middleware to redirect HTTP to HTTPS
        # It can be re-used by other stacks in other Docker Compose files
        - traefik.http.middlewares.oo14SaaSdev1-https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.oo14SaaSdev1-https-redirect.redirectscheme.permanent=true
        # traefik-http set up only to use the middleware to redirect to https
        # Uses the environment variable DOMAIN
        - traefik.http.routers.oo14SaaSdev1-public-http.rule=Host(`odoo14.viiul.com`)
        - traefik.http.routers.oo14SaaSdev1-public-http.entrypoints=http
        - traefik.http.routers.oo14SaaSdev1-public-http.middlewares=oo14SaaSdev1-https-redirect
        # traefik-https the actual router using HTTPS
        # Uses the environment variable DOMAIN
        - traefik.http.routers.oo14SaaSdev1-public-https.rule=Host(`odoo14.viiul.com`)
        - traefik.http.routers.oo14SaaSdev1-public-https.entrypoints=https
        - traefik.http.routers.oo14SaaSdev1-public-https.tls=true
        # Use the special oo10SaaSdev1 service
        - traefik.http.routers.oo14SaaSdev1-public-https.service=oo14SaaSdev1
        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.oo14SaaSdev1-public-https.tls.certresolver=le
        # Enable HTTP Basic auth, using the middleware created above
        # Define the port inside of the Docker service to use
        - traefik.http.services.oo14SaaSdev1.loadbalancer.server.port=8069

  oo14hvb:
    hostname: oo14hvb
    image: odoo:14
    environment:
      - HOST=dbms_pg12
      - PORT=5432
      - USER=odoo
      - PASSWORD=odoo
    volumes:
      - oo14hvb-webdata:/var/lib/odoo
      - oo14hvb-config:/etc/odoo
      - oo14hvb-addons:/mnt/extra-addons
      - oo14hvb-usrlocallib:/usr/local/lib
    networks:
      - odoo-network
      - traefik-public
    deploy:
      replicas: 1
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.middlewares.oo14hvb-https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.oo14hvb-https-redirect.redirectscheme.permanent=true
        - traefik.http.routers.oo14hvb-public-http.rule=Host(`hvbackup.viiul.com`)
        - traefik.http.routers.oo14hvb-public-http.entrypoints=http
        - traefik.http.routers.oo14hvb-public-http.middlewares=oo14hvb-https-redirect
        - traefik.http.routers.oo14hvb-public-https.rule=Host(`hvbackup.viiul.com`)
        - traefik.http.routers.oo14hvb-public-https.entrypoints=https
        - traefik.http.routers.oo14hvb-public-https.tls=true
        - traefik.http.routers.oo14hvb-public-https.service=oo14hvb
        - traefik.http.routers.oo14hvb-public-https.tls.certresolver=le
        - traefik.http.services.oo14hvb.loadbalancer.server.port=8069

volumes:
  oo10-saas-live-1-web-data:
  oo10-saas-live-1-config:
  oo10-saas-live-1-addons:
  oo10-saas-live-1-usrlocallib:
  oo10-saas-dev-1-web-data:
  oo10-saas-dev-1-config:
  oo10-saas-dev-1-addons:
  oo10-saas-dev-1-usrlocallib:
  oo14-saas-dev-1-web-data:
  oo14-saas-dev-1-config:
  oo14-saas-dev-1-addons:
  oo14-saas-dev-1-usrlocallib:
  oo14hvb-webdata:
  oo14hvb-config:
  oo14hvb-addons:
  oo14hvb-usrlocallib:


networks:
  odoo-network:
    external: true
  traefik-public:
    external: true
