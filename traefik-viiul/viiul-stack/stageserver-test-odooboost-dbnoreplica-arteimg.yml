version: '3.3'
services:
  oo10_boost_test_1:
    hostname: oo10BoosTest1
    image: arteimg:latest
    environment:
      - HOST=pg-master
      - PORT=5432
      - USER=odoo
      - PASSWORD=odoo
    volumes:
      - oo10-boost-test-1-web-data-arte:/var/lib/odoo
      - oo10-boost-test-1-config:/etc/odoo
      - oo10-boost-test-1-addons:/mnt/extra-addons
      - oo10-boost-test-1-usrlocallib:/usr/local/lib
    networks:
      - odoo-network
      - traefik-public
    deploy:
      placement:
        constraints:
        - node.labels.speed == ooboost
        - node.labels.db != pgprimary
      mode: replicated
      replicas: 1
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=traefik-public
        # Use the custom label "traefik.constraint-label=traefik-public"
        # This public Traefik will only use services with this label
        # That way you can add other internal Traefik instances per stack if needed
        - traefik.constraint-label=traefik-public
        # https-redirect middleware to redirect HTTP to HTTPS
        # It can be re-used by other stacks in other Docker Compose files
        - traefik.http.middlewares.oo10BoosTest1-https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.oo10BoosTest1-https-redirect.redirectscheme.permanent=true
        # traefik-http set up only to use the middleware to redirect to https
        # Uses the environment variable DOMAIN
        - traefik.http.routers.oo10BoosTest1-public-http.rule=Host(`artetest.viiul.fi`)
        - traefik.http.routers.oo10BoosTest1-public-http.entrypoints=http
        - traefik.http.routers.oo10BoosTest1-public-http.middlewares=oo10BoosTest1-https-redirect
        # traefik-https the actual router using HTTPS
        # Uses the environment variable DOMAIN
        - traefik.http.routers.oo10BoosTest1-public-https.rule=Host(`artetest.viiul.fi`)
        - traefik.http.routers.oo10BoosTest1-public-https.entrypoints=https
        - traefik.http.routers.oo10BoosTest1-public-https.tls=true
        # Use the special oo10SaaSlive1 service
        - traefik.http.routers.oo10BoosTest1-public-https.service=oo10BoosTest1
        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.oo10BoosTest1-public-https.tls.certresolver=le
        # Enable HTTP Basic auth, using the middleware created above
        # Define the port inside of the Docker service to use
        - traefik.http.services.oo10BoosTest1.loadbalancer.server.port=8069
  pg-master:
    hostname: pg-master
    image: postgres:9
    environment:
      - POSTGRES_PASSWORD=odoo
      - POSTGRES_USER=odoo
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - pg9-db-data:/var/lib/postgresql/data
    networks:
      - postgres-network
      - odoo-network
    deploy:
      placement:
        constraints:
        - node.labels.db == pgprimary
        - node.labels.speed == ooboost
      mode: replicated
      replicas: 1
volumes:
  #oo10-boost-test-1-web-data:
  oo10-boost-test-1-web-data-arte:
  oo10-boost-test-1-config:
  oo10-boost-test-1-addons:
  oo10-boost-test-1-usrlocallib:
  pg9-db-data:
networks:
  odoo-network:
    external: true
  postgres-network:
    external: true
  traefik-public:
    external: true
